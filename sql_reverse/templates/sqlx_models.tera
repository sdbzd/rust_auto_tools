use serde::{ Deserialize,Serialize };
use sqlx::FromRow;
use chrono::{NaiveDate,NaiveDateTime };
use chrono::prelude::*;
use sqlx::types::chrono::{ DateTime,Utc };
use sqlx::types::Decimal;

// use crate::db::SQL_POOL;
// use crate::db::SQL_POOL;
// use crate::db::MySQL_POOL;
use common_lib::{models::{ {{-table.struct_name-}} as ModelRow}, json::JsonPager};
use sqlx::{postgres::{PgRow}, Row};
use crate::common::{Pool, models::BackendModel};

#[derive(Serialize, Deserialize, Debug)]

/// {{ table.comment }} {{ table.table_name }}
pub struct {{ table.struct_name }} ;
impl BackendModel<ModelRow> for  {{ table.struct_name }} {

    fn get_table_name() -> &'static str {
        "{{ table.table_name }}"
    }

    fn get_fields() -> &'static str {
        {# "id, province_id, province_code, name, code, remark, sort" #}
        "{%- for v in table.fields %}
          {{- v.field_name -}}{% if loop.last == false %},{% endif %}
        {%- endfor %}"
    }

    fn get_row_filter(r: &PgRow) -> ModelRow {
        unfold_fields!(r, {
            {# id => i32,
            province_id => i32,
            province_code => String,
            name => String,
            code => String,
            sort => i32,
            remark => String, #}
            {%- for v in table.fields %}
            {% if v.comment -%}
                /// {{ v.comment }} {% if v.database_field_type %} field_type: {{ v.database_field_type }}{% endif %}{% if v.default %} default: {{ v.default }}{% endif %} {% if v.default == '' %} default: ''{% endif %}
            {% endif -%}
            {% if v.is_null == 1 -%}
                 {{ v.field_name }} =>{{ v.field_type }},
            {%- else -%}
                {% if v.field_type == ' NaiveDateTime ' -%}
                    {{ v.field_name }} => {{ v.field_type }},
                {%- else -%}
                    {{ v.field_name }} => {{ v.field_type }},
                {%- endif -%}
            {%- endif -%}
        {%- endfor %}
        })
    }
}

impl {{ table.struct_name }} {
    record_list!();
}



