use serde::{ Deserialize,Serialize };
use sqlx::FromRow;
use chrono::{NaiveDate,NaiveDateTime };
use chrono::prelude::*;
use sqlx::types::chrono::{ DateTime,Utc };
use sqlx::types::Decimal;

// use crate::db::SQL_POOL;
// use crate::db::SQL_POOL;
// use crate::db::MySQL_POOL;
{# use configs::mysql::MYSQL_POOL;
use whatever::result::Result;
use axum_utils::http_ctx::HttpCtx; #}
pub const TABLE_NAME: & 'static str = "{{table.table_name}}";

{% if table.comment -%}
	/// {{ table.comment }} {{ table.table_name }}
{% endif -%}
{% for index in table.index_key -%}
    /// 索引：{{index}}
{% endfor -%}


#[derive(Serialize, Deserialize, Debug, Clone, FromRow)]
pub struct {{ table.struct_name -}}Row {
{%- for v in table.fields %}
	{% if v.comment -%}
	    /// {{ v.comment }} {% if v.database_field_type %} field_type: {{ v.database_field_type }}{% endif %}{% if v.default %} default: {{ v.default }}{% endif %} {% if v.default == '' %} default: ''{% endif %}
	{% endif -%}
	{% if v.is_null == 1 -%}
    	pub {{ v.field_name }}: Option<{{ v.field_type }}>,
    {%- else -%}
        {% if v.field_type == ' NaiveDateTime ' -%}
            pub {{ v.field_name }}: Option<{{ v.field_type }}>,
        {%- else -%}
            pub {{ v.field_name }}: {{ v.field_type }},
        {%- endif -%}
    {%- endif -%}
{%- endfor %}
}


impl {{table.struct_name-}}Row {
    /// table index_key:  {{table.index_key}}  length:  {{table.index_key | length}}
    {%- if table.index_key | length == 1 -%} 
        {% for key in table.index_key -%}
        /// table index_key  {{table.index_key}}   {{table.index_key | length}}
        pub async fn select_by{% for key in table.index_key %}_{{key}}{% endfor %}(pool:&sqlx::MySqlPool,
            {%- for key in table.index_key -%} 
                {{key}}:
                    {%- for field in table.fields -%}
                        {%- if field.field_name == key -%}
                            {{- field.field_type -}}
                        {%- endif -%}
                    {%- endfor -%}
            {%- endfor -%})-> Result<Option<{{table.struct_name}}Row>,sqlx::Error> { 
            let mut conn = pool.acquire().await?;
            let sql = "SELECT {%for v in table.fields -%}{%- if loop.index != 1 %},{% endif -%}
            {{- v.field_name -}}{%- endfor%} FROM {{table.table_name}} WHERE {{key}} = ?";
            let data = sqlx::query_as::<_, {{table.struct_name}}Row>(&sql)
            {%- for key in table.index_key %}
                .bind({{key}}){% endfor %}
                .fetch_optional(&mut conn).await?;
            Ok(data)
        }

        pub async fn update_by{% for key in table.index_key %}_{{key}}{% endfor %}(&self, pool:&sqlx::MySqlPool) -> Result<(),sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "UPDATE {{table.table_name}} SET {% for field in table.fields -%}
                    {%- if field.field_name not in table.index_key %}{{ field.field_name }} = ?{% if loop.last == false %},{% endif %}{% endif %}
                {%- endfor %} WHERE article_id = ?";
            sqlx::query(sql)
            {%- for field in table.fields %}
                {%- if field.field_name not in table.index_key %}
                .bind(&self.{{field.field_name}}){% endif %}{% endfor %}
            {%- for key in table.index_key %}
                .bind(&self.{{key}})
            {%- endfor %}
                .execute(&mut conn).await?;
            Ok(())
        }

        pub async fn insert(&self, pool:&sqlx::MySqlPool) -> Result<u64,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "INSERT INTO {{table.table_name}} ({% for field in table.fields -%}
                    {{field.field_name}}{% if loop.last == false %},{% endif %}
                {%- endfor %}) VALUES({% for field in table.fields -%}?{% if loop.last == false %},{% endif %}{%- endfor %})";
            let data = sqlx::query(sql)
            {%- for field in table.fields %}
                .bind(&self.{{field.field_name}})
            {%- endfor %}
                .execute(&mut conn).await?.last_insert_id();
            Ok(data)
        }
       
        {% endfor %} 

    {%- else -%}  
   
        /// 多个索引
        /// table index_key  {{table.index_key}}   {{table.index_key | length}}
        pub async fn select_by {%- for key in table.index_key -%}_{{key}}{%- endfor -%}(pool:&sqlx::MySqlPool,
        {% for key in table.index_key -%} 
                {{key}}:
                    {%- for field in table.fields -%}
                        {%- if field.field_name == key -%}
                            {{field.field_type}},
                        {%- endif -%}
                    {%- endfor -%}
        {%- endfor -%}) -> Result<Option<{{table.struct_name}}Row>,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "SELECT {% for v in table.fields %}{% if loop.index != 1 %},{% endif %}{{v.field_name}}{% endfor %} FROM {{table.table_name}}
                 WHERE  {% for key in table.index_key -%}{{key}}=? {% if loop.last == false %} and {% endif %}  {% endfor -%}";                      
            let data = sqlx::query_as::<_, {{table.struct_name}}Row>(&sql)
                {% for key in table.index_key -%}                
                .bind({{key}})             
                {% endfor -%}
                .fetch_optional(&mut conn).await?;
            Ok(data)
        }    
       pub async fn update_by{%- for key in table.index_key -%}_{{key}}{%- endfor -%}(&self, pool:&sqlx::MySqlPool) -> Result<(),sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "UPDATE {{table.table_name}} SET {% for field in table.fields -%}
                    {%- if field.field_name not in table.index_key %}{{ field.field_name }} = ?{% if loop.last == false %},{% endif %}{% endif %}
                {%- endfor %} WHERE article_id = ?";
            sqlx::query(sql)
            {%- for field in table.fields %}
                {%- if field.field_name not in table.index_key %}
                .bind(&self.{{field.field_name}}){% endif %}{% endfor %}
            {%- for key in table.index_key -%}           
                .bind(&self.{{key}})
            {%- endfor %}
                .execute(&mut conn).await?;
            Ok(())
        }
        
        pub async fn insert(&self, pool:&sqlx::MySqlPool) -> Result<u64,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "INSERT INTO {{table.table_name}} ({% for field in table.fields -%}
                    {{field.field_name}}{% if loop.last == false %},{% endif %}
                {%- endfor %}) VALUES({% for field in table.fields -%}?{% if loop.last == false %},{% endif %}{%- endfor %})";
            let data = sqlx::query(sql)
            {%- for field in table.fields %}
                .bind(&self.{{field.field_name}})
            {%- endfor %}
                .execute(&mut conn).await?.last_insert_id();
            Ok(data)
        }
    {%- endif %}
}
 