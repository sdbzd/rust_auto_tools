use ::entity::{entities::{{ table.table_name -}}, entities::{{ table.table_name -}}::Entity as {{ table.struct_name -}}};
use sea_orm::*;
pub struct {{ table.struct_name -}}Query;
impl {{ table.struct_name -}}Query {

    {%- if table.index_key | length > 1 -%}
    //联合多主键，复合主键
        pub async fn find_by_id(db: &DbConn, {%- for key in table.index_key -%}{{key}}:{%- for field in table.fields -%}
        {%- if field.field_name == key -%} {{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%}) -> Result<Option<{{ table.table_name -}}::Model>, DbErr> {
            {{ table.struct_name -}}::find_by_id(({%- for key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif %}{% endfor%})).one(db).await
        }
        pub async fn find_in_page(db: &DbConn, page: u64,items_per_page: u64,) -> Result<(Vec<{{ table.table_name -}}::Model>, u64), DbErr> {
        
            let paginator = {{ table.struct_name -}}::find()
            {% for key in table.index_key -%}
            // .order_by_asc({{ table.table_name -}}::Column::{{key}})
            {% endfor%}
            .paginate(db, items_per_page);
            let num_pages = paginator.num_pages().await?;
            // Fetch paginated data
            paginator.fetch_page(page - 1).await.map(|p| (p, num_pages))
        }
    {%else%}
        pub async fn find_by_id(db: &DbConn, {%- for key in table.index_key -%}{{key}}:{%- for field in
        table.fields -%}
        {%- if field.field_name == key -%} {{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%}) -> Result<Option<{{
            table.table_name -}}::Model>, DbErr> {
            {{ table.struct_name -}}::find_by_id({%- for key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif
            %}{% endfor%}).one(db).await
        }
        pub async fn find_in_page(db: &DbConn, page: u64,items_per_page: u64,) -> Result<(Vec<{{
                table.table_name -}}::Model>, u64), DbErr> {        
            let paginator = {{ table.struct_name -}}::find()
            {% for key in table.index_key -%}
            // .order_by_asc({{ table.table_name -}}::Column::{{key}})
            {% endfor%}
            .paginate(db, items_per_page);
            let num_pages = paginator.num_pages().await?;
            // Fetch paginated data
            paginator.fetch_page(page - 1).await.map(|p| (p, num_pages))
        }
    {%endif%}
}

pub struct {{ table.struct_name -}}Mutation;

impl {{ table.struct_name -}}Mutation {
    pub async fn create_{{ table.table_name -}}(db: &DbConn,form_data: {{ table.table_name -}}::Model,) -> Result<{{ table.table_name -}}::ActiveModel, DbErr> {
        {{ table.table_name -}}::ActiveModel {
        {# title: Set(form_data.title.to_owned()),
        text: Set(form_data.text.to_owned()), #}
            ..Default::default()
        }
        .save(db)
        .await
    }
{%- if table.index_key | length > 1 -%}
    pub async fn update_by_id(db: &DbConn,{%- for key in table.index_key -%}{{key}}:{%- for field in table.fields -%}
    {%- if field.field_name == key -%}{{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%} form_data: {{ table.table_name -}}::Model,) -> Result<{{ table.table_name -}}::Model, DbErr> {
        let {{ table.table_name -}}: {{ table.table_name -}}::ActiveModel = {{ table.struct_name -}}::find_by_id(({%- for key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif %}{% endfor%}))
        .one(db)
        .await?
        .ok_or(DbErr::Custom("Cannot find .".to_owned()))
        .map(Into::into)?;

        {{ table.table_name -}}::ActiveModel {
            {# id: {{ table.table_name -}}.id,
            title: Set(form_data.title.to_owned()),
            text: Set(form_data.text.to_owned()), #}
            ..Default::default()
        }
        .update(db)
        .await
    }
{%else%}    
    pub async fn update_by_id(db: &DbConn,{%- for key in table.index_key -%}{{key}}:{%- for field in table.fields -%}
    {%- if field.field_name == key -%}{{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%} form_data: {{
    table.table_name -}}::Model,) -> Result<{{ table.table_name -}}::Model, DbErr> {
        let {{ table.table_name -}}: {{ table.table_name -}}::ActiveModel = {{ table.struct_name -}}::find_by_id({%- for
        key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif %}{% endfor%})
        .one(db)
        .await?
        .ok_or(DbErr::Custom("Cannot find .".to_owned()))
        .map(Into::into)?;
    
        {{ table.table_name -}}::ActiveModel {
        {# id: {{ table.table_name -}}.id,
        title: Set(form_data.title.to_owned()),
        text: Set(form_data.text.to_owned()), #}
        ..Default::default()
        }
        .update(db)
        .await
        }
{%endif%}

{%- if table.index_key | length > 1 -%}
    pub async fn delete_{{ table.table_name -}}(db: &DbConn, 
    {%- for key in table.index_key -%}{{key}}:{%- for field in table.fields -%}
    {%- if field.field_name == key -%} {{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%}) -> Result<DeleteResult, DbErr> {
        let {{ table.table_name -}}: {{ table.table_name -}}::ActiveModel = {{ table.struct_name -}}::find_by_id(({%- for key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif %}{% endfor%}))
        .one(db)
        .await?
        .ok_or(DbErr::Custom("Cannot find delete.".to_owned()))
        .map(Into::into)?;

        {{ table.table_name -}}.delete(db).await
    }
{% else %}
    pub async fn delete_{{ table.table_name -}}(db: &DbConn,
    {%- for key in table.index_key -%}{{key}}:{%- for field in table.fields -%}
    {%- if field.field_name == key -%} {{field.field_type}},{%- endif -%}{%- endfor -%}{%- endfor -%}) -> Result
    <DeleteResult, DbErr> {
        let {{ table.table_name -}}: {{ table.table_name -}}::ActiveModel = {{ table.struct_name -}}::find_by_id({%- for
        key in table.index_key -%}{{key}}{% if loop.last == false %},{% endif %}{% endfor%})
        .one(db)
        .await?
        .ok_or(DbErr::Custom("Cannot find delete.".to_owned()))
        .map(Into::into)?;
    
        {{ table.table_name -}}.delete(db).await
        }
{%endif %}

    pub async fn delete_all_{{ table.table_name -}}s(db: &DbConn) -> Result<DeleteResult, DbErr> {
        {{table.struct_name -}}::delete_many().exec(db).await
    }
}

{# pub struct {{ table.struct_name -}};

impl {{ table.struct_name -}} {
    /// 列表页
    pub async fn index(db: Pool) -> HttpResponse {
        match Model::list(&db).await {
            Ok(v) => { Response::encrypt_data(&v) },
            Err(message) => { Response::error(&message.to_string()) }
        }
    }
} #}
{# 
pub const TABLE_NAME: & 'static str = "{{table.table_name}}";

{% if table.comment -%}
	/// {{ table.comment }} {{ table.table_name }}
{% endif -%}
{% for index in table.index_key -%}
    /// 索引：{{index}}
{% endfor -%}


#[derive(Serialize, Deserialize, Debug, Clone, FromRow)]
pub struct {{ table.struct_name }} {
{%- for v in table.fields %}
	{% if v.comment -%}
	    /// {{ v.comment }} {% if v.database_field_type %} field_type: {{ v.database_field_type }}{% endif %}{% if v.default %} default: {{ v.default }}{% endif %} {% if v.default == '' %} default: ''{% endif %}
	{% endif -%}
	{% if v.is_null == 1 -%}
    	pub {{ v.field_name }}: Option<{{ v.field_type }}>,
    {%- else -%}
        {% if v.field_type == ' NaiveDateTime ' -%}
            pub {{ v.field_name }}: Option<{{ v.field_type }}>,
        {%- else -%}
            pub {{ v.field_name }}: {{ v.field_type }},
        {%- endif -%}
    {%- endif -%}
{%- endfor %}
}


impl {{table.struct_name}} {
    /// table index_key:  {{table.index_key}}  length:  {{table.index_key | length}}
    {%- if table.index_key | length == 1 -%} 
        {% for key in table.index_key -%}
        /// table index_key  {{table.index_key}}   {{table.index_key | length}}
        pub async fn select_by{% for key in table.index_key %}_{{key}}{% endfor %}(pool:&sqlx::MySqlPool,
            {%- for key in table.index_key -%} 
                {{key}}:
                    {%- for field in table.fields -%}
                        {%- if field.field_name == key -%}
                            {{- field.field_type -}}
                        {%- endif -%}
                    {%- endfor -%}
            {%- endfor -%})-> Result<Option<{{table.struct_name}}>,sqlx::Error> { 
            let mut conn = pool.acquire().await?;
            let sql = "SELECT {%for v in table.fields -%}{%- if loop.index != 1 %},{% endif -%}
            {{- v.field_name -}}{%- endfor%} FROM {{table.table_name}} WHERE {{key}} = ?";
            let data = sqlx::query_as::<_, {{table.struct_name}}>(&sql)
            {%- for key in table.index_key %}
                .bind({{key}}){% endfor %}
                .fetch_optional(&mut conn).await?;
            Ok(data)
        }

        pub async fn update_by{% for key in table.index_key %}_{{key}}{% endfor %}(&self, pool:&sqlx::MySqlPool) -> Result<(),sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "UPDATE {{table.table_name}} SET {% for field in table.fields -%}
                    {%- if field.field_name not in table.index_key %}{{ field.field_name }} = ?{% if loop.last == false %},{% endif %}{% endif %}
                {%- endfor %} WHERE article_id = ?";
            sqlx::query(sql)
            {%- for field in table.fields %}
                {%- if field.field_name not in table.index_key %}
                .bind(&self.{{field.field_name}}){% endif %}{% endfor %}
            {%- for key in table.index_key %}
                .bind(&self.{{key}})
            {%- endfor %}
                .execute(&mut conn).await?;
            Ok(())
        }

        pub async fn insert(&self, pool:&sqlx::MySqlPool) -> Result<u64,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "INSERT INTO {{table.table_name}} ({% for field in table.fields -%}
                    {{field.field_name}}{% if loop.last == false %},{% endif %}
                {%- endfor %}) VALUES({% for field in table.fields -%}?{% if loop.last == false %},{% endif %}{%- endfor %})";
            let data = sqlx::query(sql)
            {%- for field in table.fields %}
                .bind(&self.{{field.field_name}})
            {%- endfor %}
                .execute(&mut conn).await?.last_insert_id();
            Ok(data)
        }
       
        {% endfor %} 

    {%- else -%}  
   
        /// 多个索引
        /// table index_key  {{table.index_key}}   {{table.index_key | length}}
        pub async fn select_by {%- for key in table.index_key -%}_{{key}}{%- endfor -%}(pool:&sqlx::MySqlPool,
        {% for key in table.index_key -%} 
                {{key}}:
                    {%- for field in table.fields -%}
                        {%- if field.field_name == key -%}
                            {{field.field_type}},
                        {%- endif -%}
                    {%- endfor -%}
        {%- endfor -%}) -> Result<Option<{{table.struct_name}}>,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "SELECT {% for v in table.fields %}{% if loop.index != 1 %},{% endif %}{{v.field_name}}{% endfor %} FROM {{table.table_name}}
                 WHERE  {% for key in table.index_key -%}{{key}}=? {% if loop.last == false %} and {% endif %}  {% endfor -%}";                      
            let data = sqlx::query_as::<_, {{table.struct_name}}>(&sql)
                {% for key in table.index_key -%}                
                .bind({{key}})             
                {% endfor -%}
                .fetch_optional(&mut conn).await?;
            Ok(data)
        }    
       pub async fn update_by{%- for key in table.index_key -%}_{{key}}{%- endfor -%}(&self, pool:&sqlx::MySqlPool) -> Result<(),sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "UPDATE {{table.table_name}} SET {% for field in table.fields -%}
                    {%- if field.field_name not in table.index_key %}{{ field.field_name }} = ?{% if loop.last == false %},{% endif %}{% endif %}
                {%- endfor %} WHERE article_id = ?";
            sqlx::query(sql)
            {%- for field in table.fields %}
                {%- if field.field_name not in table.index_key %}
                .bind(&self.{{field.field_name}}){% endif %}{% endfor %}
            {%- for key in table.index_key -%}           
                .bind(&self.{{key}})
            {%- endfor %}
                .execute(&mut conn).await?;
            Ok(())
        }
        
        pub async fn insert(&self, pool:&sqlx::MySqlPool) -> Result<u64,sqlx::Error> {
            let mut conn = pool.acquire().await?;
            let sql = "INSERT INTO {{table.table_name}} ({% for field in table.fields -%}
                    {{field.field_name}}{% if loop.last == false %},{% endif %}
                {%- endfor %}) VALUES({% for field in table.fields -%}?{% if loop.last == false %},{% endif %}{%- endfor %})";
            let data = sqlx::query(sql)
            {%- for field in table.fields %}
                .bind(&self.{{field.field_name}})
            {%- endfor %}
                .execute(&mut conn).await?.last_insert_id();
            Ok(data)
        }
    {%- endif %}
}
  #}